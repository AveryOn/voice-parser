import { exec } from 'child_process';
import fs from 'fs'

function record(duration = 5): Promise<void> {
return new Promise((resolve, reject) => {
    console.log('üéô –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...');
    exec(`arecord -f cd -c 1 -r 16000 -d ${duration} input.wav`, (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', err);
            return reject(err); 
        }
        console.log('üéô –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        resolve();
    });
    });
}

function transcribe() {
  return new Promise((resolve, reject) => {
    /* 
      Whisper –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º –ø–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª input.txt. (–Ω–∞ –æ—Å–Ω–æ–≤–µ input.wav)
      input.txt –ª–µ–∂–∏—Ç —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Å –∞—É–¥–∏–æ
    */
    exec('whisper input.wav --language Russian --fp16 False --model base', (error, stdout, stderr) => {
      if (error) return reject(stderr);
      console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', stdout);
      const text = fs.readFileSync('./input.txt', 'utf-8');
      resolve(text.trim());
    });
  });
}

async function main() {
  await record(5);
  const text = await transcribe();
  console.log('üì£ –¢—ã —Å–∫–∞–∑–∞–ª:', text);
}

main();
